// Q10. Central Person for a Tag
PROFILE
MATCH (tag:Tag {name: 'John_Rhys-Davies'})
// score
OPTIONAL MATCH (tag)<-[interest:HAS_INTEREST]-(person:Person)
WITH tag, collect(person) AS interestedPersons
OPTIONAL MATCH (tag)<-[:HAS_TAG]-(message:Message)-[:HAS_CREATOR]->(person:Person)
WHERE message.creationDate > 20120122000000000
WITH tag, interestedPersons + collect(person) AS persons
UNWIND persons AS person
// poor man's disjunct union (should be changed to UNION + post-union processing in the future)
WITH DISTINCT tag, person
WITH
  tag,
  person,
  100 * length([(tag)<-[interest:HAS_INTEREST]-(person) | interest])
    + length([(tag)<-[:HAS_TAG]-(message:Message)-[:HAS_CREATOR]->(person) WHERE message.creationDate > 20120122000000000 | message])
  AS score
OPTIONAL MATCH (person)-[:KNOWS]-(friend)
WITH
  person,
  score,
  100 * length([(tag)<-[interest:HAS_INTEREST]-(friend) | interest])
    + length([(tag)<-[:HAS_TAG]-(message:Message)-[:HAS_CREATOR]->(friend) WHERE message.creationDate > 20120122000000000 | message])
  AS friendScore
RETURN
  person.id,
  score,
  sum(friendScore) AS friendsScore
ORDER BY
  score + friendsScore DESC,
  person.id ASC
LIMIT 100

SOLUCION

MATERIALIZACION DE CAMINOS

PROFILE
MATCH
(tag:Tag {name: 'John_Rhys-Davies'})<-[:HAS_TAG]-(message:Message)-[:HAS_CREATOR]->(person:Person) 
WHERE message.creationDate > 20120122000000000
create (message)-[:BI10_message_person]->(person);

// Q10. Central Person for a Tag
PROFILE
MATCH (tag:Tag {name: 'John_Rhys-Davies'})
// score
OPTIONAL MATCH (tag)<-[interest:HAS_INTEREST]-(person:Person)
WITH tag, collect(person) AS interestedPersons
OPTIONAL MATCH (tag)<-[:HAS_TAG]-(message:Message)-[:BI10_message_person]->(person:Person)
WITH tag, interestedPersons + collect(person) AS persons
UNWIND persons AS person
// poor man's disjunct union (should be changed to UNION + post-union processing in the future)
WITH DISTINCT tag, person
WITH
  tag,
  person,
  100 * length([(tag)<-[interest:HAS_INTEREST]-(person) | interest])
    + length([(message:Message)-[:BI10_message_person]->(person) | message])
  AS score
OPTIONAL MATCH (person)-[:KNOWS]-(friend)
WITH
  person,
  score,
  100 * length([(tag)<-[interest:HAS_INTEREST]-(friend) | interest])
    + length([(message:Message)-[:BI10_message_person]->(friend) | message])
  AS friendScore
WITH
  person, score, sum(friendScore) AS friendsScore
ORDER BY
  score + friendsScore DESC,
  person.id ASC
LIMIT 100
RETURN
  person.id,
  score,
  friendsScore

// Q10. Central Person for a Tag
PROFILE
MATCH (tag:Tag {name: 'John_Rhys-Davies'})
// score
OPTIONAL MATCH (tag)<-[interest:HAS_INTEREST]-(person:Person)
WITH tag, collect(person) AS interestedPersons
OPTIONAL MATCH (tag)<-[:HAS_TAG]-(message:Message)-[:BI10_message_person]->(person:Person)
WHERE message.creationDate > 20120122000000000
WITH tag, interestedPersons + collect(person) AS persons
UNWIND persons AS person
// poor man's disjunct union (should be changed to UNION + post-union processing in the future)
WITH DISTINCT tag, person
WITH
  tag,
  person,
  100 * length([(tag)<-[interest:HAS_INTEREST]-(person) | interest])
    + length([(tag)<-[:HAS_TAG]-(message:Message)-[:BI10_message_person]->(person) WHERE message.creationDate > 20120122000000000 | message])
  AS score
OPTIONAL MATCH (person)-[:KNOWS]-(friend)
WITH
  person,
  score,
  100 * length([(tag)<-[interest:HAS_INTEREST]-(friend) | interest])
    + length([(tag)<-[:HAS_TAG]-(message:Message)-[:HAS_CREATOR]->(friend) WHERE message.creationDate > 20120122000000000 | message])
  AS friendScore
RETURN
  person.id,
  score,
  sum(friendScore) AS friendsScore
ORDER BY
  score + friendsScore DESC,
  person.id ASC
LIMIT 100  